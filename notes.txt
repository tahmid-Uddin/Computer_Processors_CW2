Input - 16 bits
break it down into left(L) and right(R) 8 bits using AND mask
F(R,K) = R XOR NOT K
Iteration1 result = L XOR F(R,K)
left shift rotation for K

0000000011001001
1000110111110010

AND mask to separate left and right
XOR - (a and not b) or (not a and b)
rotation - AND mask of 10->, jump if not equals 0, increment a var to 1
	   add key to itself and then add the increment var.
swaps - use temp memory address


CIPHER FILE -
key in RAM[1], text in RAM[2], encryptedtext in RAM[0]
break RAM[2] into left and right

FIXED LOCATIONS = 0,1,2,3,4,5,6,7,10

RAM[3] <- key copy
RAM[4] <- number of loops 
RAM[5] <- loop counter

REPEAT
USES = 6,7,8,9
RAM[6] <- right
RAM[7] <- left
RAM[8] <- RAM[16] <- RAM[6] XOR not RAM[3]
RAM[7] <- RAM[7] XOR RAM[8]

RAM[3] <- Rotate key
RAM[9] <- RAM[7]
RAM[7] <- RAM[6]
RAM[6] <- RAM[9]
RAM[10] <- JUMP COUNTER

FREED = 11,12,13,14,15 


XOR FUNC -
RAM[11] XOR RAM[10]

RAM[11] <- not RAM[3]
RAM[12] <- RAM[6]

ram[13] <- not ram[11]
ram[14] <- not ram[12]
ram[14] <- ram[11] and ram[14]
ram[13] <- ram[12] and ram[13]
ram[15] <- ram[14] or ram[13]

FREE = 11,12,13,14,15,



ROTATE FUNC -



ROTATION FILE -
inputs in RAM[3], number of rotations in RAM[4], output in RAM[5]

loop using counter ->RAM[7], until RAM[4] - RAM[7] = 0
AND mask

XOR FILE -
xor between 2 16 bit inputs stored in RAM[3] and RAM[4]
results in ram[5]
(a AND NOT b) OR (NOT a AND b)

ram[6] <- not ram[3]
ram[7] <- not ram[4]
ram[8] <- ram[3] and ram[7]
ram[9] <- ram[6] and ram[4]
ram[5] <- ram[8] or ram[9]

